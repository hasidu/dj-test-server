"use client";

import { useEffect, useRef, useState } from 'react';
import WaveSurfer from 'wavesurfer.js';

interface AudioWaveformProps {
  audioUrl: string;
  isPlaying: boolean;
  onPlayPause: () => void;
  onReady?: (duration: number) => void;
  onPositionChange?: (position: number) => void;
  waveColor?: string;
  progressColor?: string;
  height?: number;
  barWidth?: number;
  barGap?: number;
}

const AudioWaveform: React.FC<AudioWaveformProps> = ({
  audioUrl,
  isPlaying,
  onPlayPause,
  onReady,
  onPositionChange,
  waveColor = 'rgba(255, 255, 255, 0.3)',
  progressColor = '#1DB954',
  height = 40,
  barWidth = 2,
  barGap = 1
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const wavesurferRef = useRef<WaveSurfer | null>(null);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (!containerRef.current) return;

    // Clean up previous instance
    if (wavesurferRef.current) {
      wavesurferRef.current.destroy();
    }
    
    const wavesurfer = WaveSurfer.create({
      container: containerRef.current,
      waveColor: waveColor,
      progressColor: progressColor,
      height: height,
      barWidth: barWidth,
      barGap: barGap,
      barRadius: 2,
      cursorWidth: 0,
      normalize: true,      // responsive is not in the type definition but works in the library
      // @ts-ignore
      responsive: true,
      fillParent: true,
      // Important: disable the audio output in wavesurfer
      // This makes the visualizer render the waveform but not play audio
      // @ts-ignore
      volume: 0
    });

    wavesurferRef.current = wavesurfer;

    // Load audio file - just for visualization
    wavesurfer.load(audioUrl);

    // Event handlers
    wavesurfer.on('ready', () => {
      setLoading(false);
      if (onReady) {
        onReady(wavesurfer.getDuration());
      }
    });

    // @ts-ignore - 'seek' event exists in wavesurfer but not in type definitions
    wavesurfer.on('seek', () => {
      if (onPositionChange) {
        onPositionChange(wavesurfer.getCurrentTime());
      }
      // When user seeks in waveform, call onPlayPause to trigger global audio playback
      onPlayPause();
    });

    wavesurfer.on('interaction', () => {
      onPlayPause();
    });

    return () => {
      if (wavesurferRef.current) {
        wavesurferRef.current.destroy();
      }
    };
  }, [audioUrl]);

  // Control playback based on isPlaying prop, but only visually
  useEffect(() => {
    if (wavesurferRef.current) {
      // Update waveform progress without actually playing/pausing audio
      // This just keeps the waveform in sync with the global audio
      if (isPlaying) {
        wavesurferRef.current.play();
      } else {
        wavesurferRef.current.pause();
      }
    }
  }, [isPlaying]);

  return (
    <div className="w-full">
      <div
        ref={containerRef}
        className={`w-full ${loading ? 'opacity-50' : 'opacity-100'}`}
      />
    </div>
  );
};

export default AudioWaveform;
