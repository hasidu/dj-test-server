"use client";

import Image from 'next/image';
import Link from 'next/link';
import { useEffe          <div className="mb-4">
          <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Artists:</span>
          <div className="flex flex-wrap gap-1 mt-1">
            {event.artists.map((artist, index) => (
              <span 
                key={index} 
                className="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs px-2 py-1 rounded"
              >
                {artist}
              </span>
            ))}
          </div>
        </div>
        
        {event.categories && event.categories.length > 0 && (
          <div className="mb-4">
            <div className="flex flex-wrap gap-1">
              {event.categories.map((category, index) => (
                <span 
                  key={index} 
                  className="bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-xs px-2 py-1 rounded-full"
                >
                  {category}
                </span>
              ))}
            </div>
          </div>
        )}
        
        <div className="flex justify-between items-center">"from 'react';
import { Event } from '@/data/events';
import { useSavedEvents } from '@/context/SavedEventsContext';

interface EventCardProps {
  event: Event;
}

export default function EventCard({ event }: EventCardProps) {
  const { isEventSaved, toggleSavedEvent, isLoaded } = useSavedEvents();
  const [isSaved, setIsSaved] = useState(false);
  
  useEffect(() => {
    if (isLoaded) {
      setIsSaved(isEventSaved(event.id));
    }
  }, [isLoaded, event.id, isEventSaved]);
  
  const handleSaveClick = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    toggleSavedEvent(event.id);
    setIsSaved(!isSaved);
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg transition-transform duration-300 hover:-translate-y-1 hover:shadow-xl">
      <Link href={`/events/${event.id}`} className="block">
        <div className="relative h-60 w-full overflow-hidden group">
          <Image 
            src={event.image} 
            alt={event.title}
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            className="object-cover transition-transform duration-500 group-hover:scale-110"
            priority={event.featured}
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-70"></div>
          
          {event.featured && (
            <div className="absolute top-4 left-4 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full">
              Featured
            </div>
          )}
          
          <button 
            onClick={handleSaveClick} 
            className="absolute top-4 right-4 bg-white/20 backdrop-blur-sm p-2 rounded-full transition-all duration-300 hover:bg-white/40"
            aria-label={isSaved ? "Remove from saved" : "Save this event"}
          >
            {isSaved ? (
              <svg className="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z"></path>
              </svg>
            ) : (
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
              </svg>
            )}
          </button>
          
          <div className="absolute bottom-4 left-4 right-4">
            <h3 className="text-xl font-bold text-white mb-1">{event.title}</h3>
            <div className="flex items-center text-white/90 text-sm">
              <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd"></path>
              </svg>
              {event.date}
            </div>
          </div>
        </div>
      </Link>
      
      <div className="p-6">
        <div className="mb-4">
          <div className="flex items-center text-gray-600 dark:text-gray-300 mb-1">
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd"></path>
            </svg>
            {event.time}
          </div>
          <div className="flex items-center text-gray-600 dark:text-gray-300">
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
              <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd"></path>
            </svg>
            {event.location}
          </div>
        </div>
        
        <p className="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">
          {event.description}
        </p>
        
        <div className="mb-4">
          <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Artists:</span>
          <div className="flex flex-wrap gap-1 mt-1">
            {event.artists.map((artist, index) => (
              <span 
                key={index} 
                className="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs px-2 py-1 rounded"
              >
                {artist}
              </span>
            ))}
          </div>
        </div>
        
        <div className="flex justify-between items-center">
          {event.tickets && (
            <span className="text-green-600 dark:text-green-400 font-medium">
              {event.tickets.price}
            </span>
          )}
          <Link 
            href={`/events/${event.id}`} 
            className="bg-black text-white hover:bg-green-700 transition-colors px-4 py-2 rounded text-sm font-medium"
          >
            View Details
          </Link>
        </div>
      </div>
    </div>
  );
}
